(!******************************************************
   Xpress Insight examples
   =============================

   file vdl_components.mos
   ```````````````````````
   VDL Components model

   (c) 2018 Fair Isaac Corporation
       rev. Feb. 2017
*******************************************************!)
model "Table Performance"
  uses "mminsight"
  version 4.1.0

  !@insight.resultdata.delete on-execute
  !@insight.execmodes.FAST.threads=1
  !@insight.execmodes.FAST.preferredservice=SECONDARY
  !@insight.execmodes.REPORT.threads=8

  ! inform the compiler that that all the global annotations have now been defined.
  !@mc.flush

  parameters
    MyParam = "insight"
    LENGTH = 400
    DATAFOLDER = ""
    DATAFILE = DATAFOLDER + "agency_example_data.txt"
  end-parameters

  ! *** Declare public data *** !
  public declarations

    !@insight.alias A scalar
    MyScalar: string        ! A string scalar

    !@insight.alias A boolean
    MyBool: boolean         ! A boolean
    MyDate: string          ! A date
    MyDate2: string         ! A date
    MyDate3: string         ! A date
    MyDate4: string         ! A date
    MyDate5: string         ! A date
    Month: string           ! Current month as string

    ! several scalars for testing a display issue
    entityBoolA: boolean
    entityBoolB: boolean
    entityBoolC: boolean
    entityBoolD: boolean
    entityBoolE: boolean
    entityBoolF: boolean

    entityIntA: integer
    entityIntB: integer
    entityIntC: integer
    entityIntD: integer

    !@insight.alias Support level
    SupportLevel: integer   ! The selected support level

    !@insight.transform.labels.entity PlanetNamesFromString
    SelectedPlanetString: string

    !@insight.transform.labels.entity PlanetNamesFromInteger
    SelectedPlanetInteger: integer

    !@insight.transform.labels.entity PlanetNamesFromInteger
    UnknownPlanetInteger: integer

    !@insight.update.afterexecution true
    reported_execution_mode: string

    ParamLabelIndices = {"insight", "400", ""}
    ParamLabels : array(ParamLabelIndices) of string

    ! Set of months

    !@insight.alias Months of the year
    MonthsOfYear: set of string
    Settings: array(MonthsOfYear) of string

    Factories: set of string                       ! Set of factories
    FactoryCapacities: array(Factories) of integer ! Factory capacity
    FactorySupply: array(Factories, MonthsOfYear) of integer ! Factory supply

    !@insight.transform.labels.entity StockSizeLabels
    StockSizeValues = 0..2

    StockSizeLabels: array(StockSizeValues) of string
    !@insight.transform.labels.entity StockSizeLabels
    StockSizes: array(Factories, MonthsOfYear) of integer

    Customers: set of string
    FactoryCustomerAgreements: array(Factories, MonthsOfYear, Customers) of real

    !@insight.alias Factory Demand (units)
    FactoryDemand: array(Factories, MonthsOfYear) of integer ! Factory demand

    !@insight.alias Shipping costs
    ShippingCosts: array(Factories, Factories) of real ! Costs for shipping between factories

    !@insight.transform.labels.entity SupportLevelNames
    SupportLevels = 0..2                           ! Set of support levels

    SupportLevelNames: array(SupportLevels) of string ! Support level names
    !@insight.alias Support Costs
    SupportCosts: array(SupportLevels) of real     ! Support level cost
    SupportRenewed: array(SupportLevels) of boolean! Support renewed by client
    SupportPaid: array(SupportLevels) of string    ! Support costs have been paid. Client will put Paid or Pending in this
    !@insight.alias Service Level Agreements
    ServiceLevelAgreements: array(SupportLevels) of integer ! Support level contract

    Indices = 1..LENGTH                            ! Set of indices
    RealArray: array(Indices) of real              ! Array of reals
    IntArray: array(Indices) of integer            ! Array of integers
    demand: integer
    percent: real

    ! Sets
    AGENCY: set of string                       ! Collections agencies

    ! Agency data
    MIN_AGENT_ACCOUNTS: array(AGENCY) of real   ! Min number of contracts per agent
    MAX_AGENT_ACCOUNTS: array(AGENCY) of real   ! Max number of contracts per agent
    NAGENTS: array(AGENCY) of real              ! Number of agents per agency
    MIN_AGENT_COMMISSION: array(AGENCY) of real ! Minimum commission per agent
    MAX_PERC_AGENCY: array(AGENCY) of real      ! Maximum percentage per agency

    ! Definitions for GUI
    AGENCYNAME: array(AGENCY) of string         ! Agency name/description
	!public declaration
	DAYS: set of string                 ! Days in planning period
	SITES: range                        ! Work locations
	staffingpersite: array(DAYS, SITES) of mpvar ! Number of staff per site
	STAFF: set of string                ! All persons to schedule
	assign: array(STAFF,DAYS,SITES) of mpvar    ! Worksite assignments

    !@insight.transform.labels.entity PlanetNamesFromInteger
    PlanetsAsInteger : set of integer

    !@insight.transform.labels.entity PlanetNamesFromString
    PlanetsAsString : set of string
    PlanetNamesFromInteger: array(PlanetsAsInteger) of string
    PlanetNamesFromString: array(PlanetsAsString) of string

    ObservedPlanetsIndex = 0..3

    !@insight.transform.labels.entity PlanetNamesFromString
    ObservedPlanetsAsString: array(ObservedPlanetsIndex) of string

    !@insight.transform.labels.entity PlanetNamesFromInteger
    ObservedPlanetsAsInteger: array(ObservedPlanetsIndex) of integer

    ! read in table 1
    ! t1IndexA,t1IndexB,t1IndexC,t1IndexD,t1IndexE,t1Col1,t1Col2,t1Col3,t1Col4,t1Col5,t1Col6
    t1IndexA,t1IndexB,t1IndexC,t1IndexD,t1IndexE: set of integer
    t1Col1,t1Col2,t1Col3,t1Col4,t1Col5: dynamic array(t1IndexA,t1IndexB,t1IndexC,t1IndexD,t1IndexE) of integer
    t1Col6: dynamic array(t1IndexA,t1IndexB,t1IndexC,t1IndexD,t1IndexE) of boolean

    ! read in table 2
    ! t2IndexA,t2IndexB,t2IndexC,t2IndexD,t2IndexE,t2IndexF,t2Col1,t2Col2,t2Col3,t2Col4
    t2IndexA,t2IndexB,t2IndexC,t2IndexD,t2IndexE,t2IndexF: set of integer
    t2Col1: dynamic array(t2IndexA,t2IndexB,t2IndexC,t2IndexD,t2IndexE,t2IndexF) of real
    t2Col2: dynamic array(t2IndexA,t2IndexB,t2IndexC,t2IndexD,t2IndexE,t2IndexF) of boolean
    t2Col3: dynamic array(t2IndexA,t2IndexB,t2IndexC,t2IndexD,t2IndexE,t2IndexF) of string
    t2Col4: dynamic array(t2IndexA,t2IndexB,t2IndexC,t2IndexD,t2IndexE,t2IndexF) of integer

    ! read in table 3
    ! t3IndexA,t3IndexB,t3IndexC,t3IndexD,t3IndexE,t3IndexF,t3Col1,t3Col2,t3Col3,t3Col4
    t3IndexA,t3IndexB,t3IndexC,t3IndexD,t3IndexE,t3IndexF: set of integer
    t3Col1: dynamic array(t3IndexA,t3IndexB,t3IndexC,t3IndexD,t3IndexE,t3IndexF) of real
    t3Col2: dynamic array(t3IndexA,t3IndexB,t3IndexC,t3IndexD,t3IndexE,t3IndexF) of boolean
    t3Col3: dynamic array(t3IndexA,t3IndexB,t3IndexC,t3IndexD,t3IndexE,t3IndexF) of string
    t3Col4: dynamic array(t3IndexA,t3IndexB,t3IndexC,t3IndexD,t3IndexE,t3IndexF) of integer

    ! read in table 4
    ! t4IndexA,t4IndexB,t4IndexC,t4IndexD,t4IndexE,t4IndexF,t4Col1,t4Col2,t4Col3,t4Col4
    t4IndexA,t4IndexB,t4IndexC,t4IndexD,t4IndexE,t4IndexF: set of integer
    t4Col1: dynamic array(t4IndexA,t4IndexB,t4IndexC,t4IndexD,t4IndexE,t4IndexF) of real
    t4Col2: dynamic array(t4IndexA,t4IndexB,t4IndexC,t4IndexD,t4IndexE,t4IndexF) of boolean
    t4Col3: dynamic array(t4IndexA,t4IndexB,t4IndexC,t4IndexD,t4IndexE,t4IndexF) of string
    t4Col4: dynamic array(t4IndexA,t4IndexB,t4IndexC,t4IndexD,t4IndexE,t4IndexF) of integer

    ! read in table 5
    ! t5IndexA,t5IndexB,t5IndexC,t5IndexD,t5IndexE,t5IndexF,t5Col1,t5Col2,t5Col3,t5Col4
    t5IndexA,t5IndexB,t5IndexC,t5IndexD,t5IndexE,t5IndexF: set of integer
    t5Col1: dynamic array(t5IndexA,t5IndexB,t5IndexC,t5IndexD,t5IndexE,t5IndexF) of real
    t5Col2: dynamic array(t5IndexA,t5IndexB,t5IndexC,t5IndexD,t5IndexE,t5IndexF) of boolean
    t5Col3: dynamic array(t5IndexA,t5IndexB,t5IndexC,t5IndexD,t5IndexE,t5IndexF) of string
    t5Col4: dynamic array(t5IndexA,t5IndexB,t5IndexC,t5IndexD,t5IndexE,t5IndexF) of integer

  end-declarations

  ! *** Loading input data *** !

  procedure datainput
    PlanetsAsString := {"1", "2", "3", "4", "5", "6", "7", "8", "9"}
    PlanetsAsInteger := {1, 2, 3, 4, 5, 6, 7, 8, 9}

    PlanetNamesFromInteger(1) := "Mercury"
    PlanetNamesFromInteger(2) := "Venus"
    PlanetNamesFromInteger(3) := "Earth"
    PlanetNamesFromInteger(4) := "Mars"
    PlanetNamesFromInteger(5) := "Jupiter"
    PlanetNamesFromInteger(6) := "Saturn"
    PlanetNamesFromInteger(7) := "Uranus"
    PlanetNamesFromInteger(8) := "Neptune"

    PlanetNamesFromString("1") := "Mercury"
    PlanetNamesFromString("2") := "Venus"
    PlanetNamesFromString("3") := "Earth"
    PlanetNamesFromString("4") := "Mars"
    PlanetNamesFromString("5") := "Jupiter"
    PlanetNamesFromString("6") := "Saturn"
    PlanetNamesFromString("7") := "Uranus"
    PlanetNamesFromString("8") := "Neptune"

    ObservedPlanetsAsString(0) := "1"
    ObservedPlanetsAsString(1) := "2"
    ObservedPlanetsAsString(2) := "3"
    ObservedPlanetsAsString(3) := "9"

    ObservedPlanetsAsInteger(0) := 8
    ObservedPlanetsAsInteger(1) := 7
    ObservedPlanetsAsInteger(2) := 6
    ObservedPlanetsAsInteger(3) := 9

    ParamLabels("insight") := "insight (LABEL)"
    ParamLabels("400") := "Four hundred (LABEL)"
    ParamLabels("") := "empty (LABEL)"

    MonthsOfYear := {"January", "February", "March",
	    "April", "May", "June", "July", "August",
	    "September", "October", "November", "December"}

    Settings("January") := "Bob"

    DAYS := {"FRI","SAT","SUN","MON","TUE","WED","THU"}

    Factories := {"New York", "Paris", "Peckham"}

    StockSizeLabels(0) := "Small"
    StockSizeLabels(1) := "Medium"
    StockSizeLabels(2) := "Large"

    Customers := {"Nike", "Adidas", "Puma"}

    forall (f in Factories) do
      forall (m in MonthsOfYear) do
        FactorySupply(f,m) := ceil((demand / 100) * 130)
        FactoryDemand(f,m) := demand
        forall (c in Customers) do
          FactoryCustomerAgreements(f, m, c) := demand * random
        end-do

        StockSizes(f, m) := demand mod 3
        demand += 1
      end-do
    end-do

    forall (f1 in Factories, f2 in Factories) do
        ShippingCosts(f1, f2) := random
    end-do

    MyScalar := MyParam
    MyBool := TRUE
    Month := "March"
    MyDate := "2014-01-12" ! Default Format
    MyDate2 := "09/29/2014" ! US Format
    MyDate3 := "15/12/2014" ! UK Format
    MyDate4 := "2011-11-19" ! Default Format
    MyDate5 := "2011-11-19" ! Default Format
    SupportLevel := 1
    SelectedPlanetString := "2" ! Venus is selected
    SelectedPlanetInteger := 4 ! Mars is selected
    UnknownPlanetInteger := 9 ! Unknown planet

    entityBoolA := true
    entityBoolB := true
    entityBoolC := true
    entityBoolD := true
    entityBoolE := true
    entityBoolF := true
    entityIntA := 1
    entityIntB := 20
    entityIntC := 300
    entityIntD := 4000


    SupportLevelNames :: ["Bronze", "Silver", "Gold"]
    SupportCosts :: [100.0, 250.0, 500.0]
    SupportRenewed :: [FALSE, TRUE, FALSE]
    SupportPaid :: ['Pending', 'Paid', 'Pending']
    ServiceLevelAgreements :: [48, 24, 1]

    forall (i in Indices) do
      RealArray(i) := floor(random * 10000) / 100
      IntArray(i) := floor(random * 150)
    end-do

    initializations from DATAFILE
        AGENCYNAME
        MIN_AGENT_ACCOUNTS
        MAX_AGENT_ACCOUNTS
        NAGENTS
        MIN_AGENT_COMMISSION
        MAX_PERC_AGENCY
    end-initializations

    initializations from "mmsheet.csv:table1.csv"
        [t1Col1,t1Col2,t1Col3,t1Col4,t1Col5,t1Col6] as "skiph;[A1:K2001]"
    end-initializations

    initializations from "mmsheet.csv:table2.csv"
        [t2Col1,t2Col2,t2Col3,t2Col4] as "skiph;[A1:J10001]"
    end-initializations

    initializations from "mmsheet.csv:table3.csv"
        [t3Col1,t3Col2,t3Col3,t3Col4] as "skiph;[A1:J100001]"
    end-initializations

    initializations from "mmsheet.csv:table4.csv"
        [t4Col1,t4Col2,t4Col3,t4Col4] as "skiph;[A1:J500001]"
    end-initializations

    initializations from "mmsheet.csv:table5.csv"
        [t5Col1,t5Col2,t5Col3,t5Col4] as "skiph;[A1:J1000001]"
    end-initializations
  end-procedure

  forall(d in DAYS, s in SITES) do
    staffingpersite(d,s) = sum(p in STAFF) assign(p,d,s)
  end-do

  case insightgetmode of
    INSIGHT_MODE_LOAD: do
      datainput
    end-do
    INSIGHT_MODE_RUN: do
      insightpopulate
    end-do
    "FAST": do
    	writeln("FAST - Execution mode")
    end-do
    "REPORT": do
    	writeln("REPORT - Execution mode")
    end-do

  end-case

  reported_execution_mode := insightgetmode
  writeln("EXECUTION MODE:", reported_execution_mode)
  writeln("\nModel run finished.")

end-model
