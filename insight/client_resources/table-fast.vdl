<vdl version="4.1">
    <vdl-page>
        <link href="css/bootstrap/tabulator_bootstrap.min.css" rel="stylesheet">
        <script type="text/javascript" src="js/tabulator.min.js"></script>

        <script>
            var num_records = VDL.createVariable(0);
        </script>

        <vdl-section>
            <vdl-row>
                <vdl-column heading="fast table - continuous" size="6">
                    <h3><span vdl-text="=num_records"></span> rows continous scroll</h3>
                </vdl-column>
                <vdl-column heading="fast table - paged" size="6">
                    <h3><span vdl-text="=num_records"></span> rows with pagination</h3>
                </vdl-column>
            </vdl-row>
            <vdl-row>
                <vdl-column size="6">
                    <div id="example-table"></div>
                </vdl-column>
                <vdl-column size="6">
                    <div id="example-table-paged"></div>
                </vdl-column>
            </vdl-row>
        </vdl-section>
    </vdl-page>
    <script>
        $(document).ready(function () {
            //create Tabulator on DOM element with id "example-table"
            var table = new Tabulator("#example-table", {
                height: 610, // set height of table (in CSS or here), this enables the Virtual DOM and improves render speed dramatically (can be any valid css height value)
                // layout: "fitColumns", //fit columns to width of table (optional)
                columns: [ //Define Table Columns
                    {title: "ID", field: "id"},
                    {title: "AA", field: "a"},
                    {title: "BB", field: "b"},
                    {title: "CC", field: "c"},
                    {title: "DD", field: "d"},
                    {title: "EE", field: "e"},
                    {title: "FF", field: "f"},
                    {title: "Col3", field: "g"},
                ],
                rowClick: function (e, row) { //trigger an alert message when the row is clicked
                    alert("Row " + row.getData().id + " Clicked!!!!");
                },
                layout: "fitColumns",
                placeholder: 'Waiting for data'
                // pagination:"local",
                // paginationSize:15
            });

            //create Tabulator on DOM element with id "example-table"
            var tablePaged = new Tabulator("#example-table-paged", {
                height: 610, // set height of table (in CSS or here), this enables the Virtual DOM and improves render speed dramatically (can be any valid css height value)
                // layout: "fitColumns", //fit columns to width of table (optional)
                columns: [ //Define Table Columns
                    {title: "ID", field: "id"},
                    {title: "AA", field: "a"},
                    {title: "BB", field: "b"},
                    {title: "CC", field: "c"},
                    {title: "DD", field: "d"},
                    {title: "EE", field: "e"},
                    {title: "FF", field: "f"},
                    {title: "Col3", field: "g"},
                ],
                rowClick: function (e, row) { //trigger an alert message when the row is clicked
                    alert("Row " + row.getData().id + " Clicked!!!!");
                },
                layout: "fitColumns",
                pagination: "local",
                paginationSize: 15,
                placeholder: 'Waiting for data'
            });

            var tableCol = 't3Col3';

            insight.ready(function () {
                var view = insight.getView();
                view
                    .withFirstScenario()
                    .withEntities(tableCol)
                    .notify(function (scenario) {
                        var t2Col1Arr = scenario.getArray(tableCol);
                        var obj = t2Col1Arr.toObjectArray();
                        num_records(obj.length);
                        var data = _.map(obj, function (singleObj, idx) {
                            var datum = _.zipObject(['a', 'b', 'c', 'd', 'e', 'f', 'g'], _(singleObj.key).concat(singleObj.value).value());
                            datum.id = idx;
                            return datum;
                        });
                        table.setData(data);
                        tablePaged.setData(data);
                    });
            });
        });
    </script>
</vdl>