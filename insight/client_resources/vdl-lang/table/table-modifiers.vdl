<vdl version="4.1">

    <vdl-include src="includes/doc-extensions/code-panel.vdl"></vdl-include>

    <ol class="todo">
        <li>Intro text/Explanation</li>
        <li>Format VDL source and usage as per other views.</li>
    </ol>


    <style>
        .table-sidenote {
            padding-top: 10px;
        }

        .display-table-config {
            font-family: monospace;
            white-space: pre;
        }
    </style>

    <script>
        /**
         * Run all local table modifiers.
         *
         * @param {Object} config original table config
         * @return {Object} the modified table config
         */
        function allTableModifiers(config) {
            config = capitalizeHeaders(makeEditable(config));
            logTableConfig(config);
            return config;
        }

        /**
         * Capitalize the column headers.
         *
         * @param {Object} config original table config
         * @return {Object} the modified table config
         */
        function capitalizeHeaders(config) {
            config.columnOptions.forEach(function (columnOptions) {
                if (columnOptions.title) {
                    columnOptions.title = columnOptions.title.toUpperCase();
                }
            });
            return config;
        }

        /**
         * Make all columns editable and append "(editable)" to the end of all column headers.
         *
         * @param {Object} config original table config
         * @return {Object} the modified table config
         */
        function makeEditable(config) {
            config.columnOptions.forEach(function (columnOptions) {
                if (columnOptions.title) {
                    columnOptions.title = columnOptions.title + ' (editable)';
                }
                columnOptions.editable = true;
            });
            return config;
        }

        /**
         * Logs table config. Because it does not return an object it will not affect the table configuration.
         *
         * @param {Object} config original table config
         * @return {Object} the modified table config
         */
        function logTableConfig(config) {
            $('.display-table-config[data-table-id="' + config.tableId + '"]')
                    .empty()
                    .append($('<pre>').text('table config logger (' + config.tableId + '):' + JSON.stringify(config, null, 2)));
        }

        /**
         * Makes the title of the second column uppercase.
         */
        function styleSecondDataColumn(config) {
            var column = config.columnOptions[1];
            // The second data column may not yet exist so perform a defensive check
            if (column) {
                column.title = column.title.toUpperCase();
            }
            return config;
        }
    </script>

    <vdl-page>
        <vdl-section heading="Table modifiers: capitalizeHeaders + logTableConfig">
            <vdl-row>
                The table configuration is passed through the capitalizeHeaders function declared in the VDL document.
                It is also passed into logTableConfig to be logged out to the side of the table.
            </vdl-row>
            <vdl-row>
                <vdl-column size="6">
                    <h5>Table</h5>
                    <vdlx-datagrid id="table-1"
                                   modifier="=function(config) {config = capitalizeHeaders(config); logTableConfig(config); return config;}">
                        <vdlx-datagrid-column heading="support costs" entity="SupportCosts"></vdlx-datagrid-column>
                        <vdlx-datagrid-column heading="service level" entity="ServiceLevelAgreements"></vdlx-datagrid-column>
                    </vdlx-datagrid>
                </vdl-column>
                <vdl-column size="5" offset="1">
                    <h5>Custom configuration options passed to table</h5>
                    <code-panel class="table-sidenote display-table-config" data-table-id="table-1"></code-panel>
                </vdl-column>
            </vdl-row>
        </vdl-section>

        <vdl-section>
            <vdl-row>
                <vdl-column heading="Script source">
                    <code-panel>
/**
 * Capitalize the column headers.
 *
 * @param {Object} config original table config
 * @return {Object} the modified table config
 */
function capitalizeHeaders(config) {
    config.columnOptions.forEach(function (columnOptions) {
        if (columnOptions.title) {
            columnOptions.title = columnOptions.title.toUpperCase();
        }
    });
    return config;
}

/**
 * Logs table config. Because it does not return an object it will not affect the table configuration.
 *
 * @param {Object} config original table config
 * @return {Object} the modified table config
 */
function logTableConfig(config) {
    $('.display-table-config[data-table-id=&quot;' + config.tableId + '&quot;]')
            .text('table config logger (' + config.tableId + '):' + JSON.stringify(config, null, 2));
}

                    </code-panel>
                </vdl-column>
            </vdl-row>
            <vdl-row>
                <vdl-column heading="VDL Source">
                    <code-panel>
&lt;vdlx-datagrid id=&quot;table-1&quot;
           modifier=&quot;=function(config) {config = capitalizeHeaders(config); logTableConfig(config); return config;}&quot;&gt;
    &lt;vdlx-datagrid-column heading=&quot;support costs&quot; entity=&quot;SupportCosts&quot;&gt;&lt;/vdlx-datagrid-column&gt;
    &lt;vdlx-datagrid-column heading=&quot;service level&quot; entity=&quot;ServiceLevelAgreements&quot;&gt;&lt;/vdlx-datagrid-column&gt;
&lt;/vdlx-datagrid&gt;
                    </code-panel>
                </vdl-column>
            </vdl-row>
        </vdl-section>

        <vdl-section heading="Table modifiers: makeEditable + logTableConfig">
            <vdl-row>
                The table configuration is passed through the makeEditable function declared in the VDL document. It is
                also passed into logTableConfig to be logged out to the side of the table.
            </vdl-row>
            <vdl-row>
                <vdl-column size="6">
                    <h5>Table</h5>
                    <vdlx-datagrid id="table-2"
                                   modifier="=function(config) {config = makeEditable(config); logTableConfig(config); return config;}">
                        <vdlx-datagrid-column heading="support costs" entity="SupportCosts"></vdlx-datagrid-column>
                        <vdlx-datagrid-column heading="service level" entity="ServiceLevelAgreements"></vdlx-datagrid-column>
                    </vdlx-datagrid>
                </vdl-column>
                <vdl-column size="5" offset="1">
                    <h5>Custom configuration options passed to table</h5>
                    <code-panel class="table-sidenote display-table-config" data-table-id="table-2"></code-panel>
                </vdl-column>
            </vdl-row>
        </vdl-section>

        <vdl-section>
            <vdl-row>
                <vdl-column heading="Script source">
                    <code-panel>
/**
 * Make all columns editable and append &quot;(editable)&quot; to the end of all column headers.
 *
 * @param {Object} config original table config
 * @return {Object} the modified table config
 */
function makeEditable(config) {
    config.columnOptions.forEach(function (columnOptions) {
        if (columnOptions.title) {
            columnOptions.title = columnOptions.title + ' (editable)';
        }
        columnOptions.editable = true;
    });
    return config;
}
                    </code-panel>
                </vdl-column>
            </vdl-row>
            <vdl-row>
                <vdl-column heading="VDL Source">
                    <code-panel>
&lt;vdlx-datagrid id=&quot;table-2&quot;
           modifier=&quot;=function(config) {config = makeEditable(config); logTableConfig(config); return config;}&quot;&gt;
    &lt;vdlx-datagrid-column heading=&quot;support costs&quot; entity=&quot;SupportCosts&quot;&gt;&lt;/vdlx-datagrid-column&gt;
    &lt;vdlx-datagrid-column heading=&quot;service level&quot; entity=&quot;ServiceLevelAgreements&quot;&gt;&lt;/vdlx-datagrid-column&gt;
&lt;/vdlx-datagrid&gt;
                    </code-panel>
                </vdl-column>
            </vdl-row>
        </vdl-section>

        <vdl-section heading="Table modifiers: allTableModifiers">
            <vdl-row>
                The table configuration is passed through the allTableModifiers function declared in the VDL
                document.
            </vdl-row>
            <vdl-row>
                <vdl-column size="6">
                    <h5>Table</h5>
                    <vdlx-datagrid id="table-3" modifier="=allTableModifiers">
                        <vdlx-datagrid-column heading="support costs" entity="SupportCosts"></vdlx-datagrid-column>
                        <vdlx-datagrid-column heading="service level" entity="ServiceLevelAgreements"></vdlx-datagrid-column>
                    </vdlx-datagrid>
                </vdl-column>
                <vdl-column size="5" offset="1">
                    <h5>Custom configuration options passed to table</h5>
                    <code-panel class="table-sidenote display-table-config" data-table-id="table-3"></code-panel>
                </vdl-column>
            </vdl-row>
        </vdl-section>

        <vdl-section>
            <vdl-row>
                <vdl-column heading="Script source">
                    <code-panel>
/**
 * Run all local table modifiers.
 *
 * @param {Object} config original table config
 * @return {Object} the modified table config
 */
function allTableModifiers(config) {
    config = capitalizeHeaders(makeEditable(config));
    logTableConfig(config);
    return config;
}
                    </code-panel>
                </vdl-column>
            </vdl-row>
            <vdl-row>
                <vdl-column heading="VDL Source">
                    <code-panel>
&lt;vdlx-datagrid id=&quot;table-3&quot; modifier=&quot;=allTableModifiers&quot;&gt;
    &lt;vdlx-datagrid-column heading=&quot;support costs&quot; entity=&quot;SupportCosts&quot;&gt;&lt;/vdlx-datagrid-column&gt;
    &lt;vdlx-datagrid-column heading=&quot;service level&quot; entity=&quot;ServiceLevelAgreements&quot;&gt;&lt;/vdlx-datagrid-column&gt;
&lt;/vdlx-datagrid&gt;
                    </code-panel>
                </vdl-column>
            </vdl-row>
        </vdl-section>

        <vdl-section heading="Table modifiers: Defensive coding with dynamic tables">
            <vdl-row>
                <p>When you have a table with dynamic configuration the number of columns may change as data is resolved.
                You have to be aware of this when using table modifiers and targeting specific column numbers.</p>
                <p>This example shows a table with columns added in a vdl-repeat. If the data takes longer to resolve the table
                modifier may be called more than once, initially not containing the expected second data column. Or the set entity
                that is being looped over may be empty.</p>
                <p>The table modifier function defensively checks the column exists before applying changes to it.</p>
            </vdl-row>
            <vdl-row>
                <vdl-column size="12">
                    <vdlx-datagrid modifier="=styleSecondDataColumn">
                        <vdlx-datagrid-column entity="FactoryCapacities" editable="true" heading="Capacity"></vdlx-datagrid-column>
                        <vdlx-datagrid-column entity="FactoryDemand" editable="true"
                                          heading="='Demand (' + m.label + ')'"
                                          vdl-repeat="=m in scenario.entities.MonthsOfYear">
                            <vdl-index-filter set="MonthsOfYear" value="=m.value"></vdl-index-filter>
                        </vdlx-datagrid-column>
                    </vdlx-datagrid>
                </vdl-column>
            </vdl-row>

            <vdl-row>
                <vdl-column heading="Script source">
                    <code-panel>
/**
* Makes the title of the second column uppercase.
*/
function styleSecondDataColumn(config) {
    var column = config.columnOptions[1];
    // The second data column may not yet exist so perform a defensive check
    if (column) {
        column.title = column.title.toUpperCase();
    }
    return config;
}
                    </code-panel>
                </vdl-column>
            </vdl-row>
            <vdl-row>
                <vdl-column heading="VDL Source">
                    <code-panel>
&lt;vdlx-datagrid modifier=&quot;=styleSecondDataColumn&quot;&gt;
    &lt;vdlx-datagrid-column entity=&quot;FactoryCapacities&quot; editable=&quot;true&quot; heading=&quot;Capacity&quot;&gt;&lt;/vdlx-datagrid-column&gt;
    &lt;vdlx-datagrid-column entity=&quot;FactoryDemand&quot; editable=&quot;true&quot;
                      heading=&quot;='Demand (' + m.label + ')'&quot;
                      vdl-repeat=&quot;=m in scenario.entities.MonthsOfYear&quot;&gt;
        &lt;vdl-index-filter set=&quot;MonthsOfYear&quot; value=&quot;=m.value&quot;&gt;&lt;/vdl-index-filter&gt;
    &lt;/vdlx-datagrid-column&gt;
&lt;/vdlx-datagrid&gt;
                    </code-panel>
                </vdl-column>
            </vdl-row>
        </vdl-section>

        <vdl-section heading="Table modifiers: invalid modifier expression">
            <vdl-row>
                The modifier attribute for this vdlx-datagrid results in a console error because at runtime it resolves
                to a number value rather than a function.
            </vdl-row>
            <vdl-row>
                <vdl-column size="5">
                    <h5>Table</h5>
                    <vdlx-datagrid modifier="=2+1">
                        <vdlx-datagrid-column heading="support costs" entity="SupportCosts"></vdlx-datagrid-column>
                        <vdlx-datagrid-column heading="service level" entity="ServiceLevelAgreements"></vdlx-datagrid-column>
                    </vdlx-datagrid>
                </vdl-column>
                <vdl-column size="5">
                    <div class="table-sidenote">
                        This table should render with the original configuration options but an error should be shown in
                        the console explaining the error with the modifier expression.
                    </div>
                </vdl-column>
            </vdl-row>
        </vdl-section>
    </vdl-page>
</vdl>