{"version":3,"sources":["vdlx-datagrid/attributes.js","vdlx-datagrid/transform.js","vdlx-datagrid/view-model.js","vdlx-datagrid/index.js","vdlx-datagrid-column/index.js","index.js"],"names":["name","description","acceptsExpression","required","expressionVars","type","element","attributes","api","paramsBuilder","getComponentParamsBuilder","$element","$","scenarioId","expression","isString","parsedNum","parseInt","rawValue","isNaN","addParam","Error","value","pageSize","pageSizeNum","pageMode","columnFilter","addRemoveRow","tableId","attr","width","modifier","klass","removeAttr","rowFilter","addFunctionOrExpressionParam","gridData","gridHeight","$tableDiv","addClass","append","COLUMN_UPDATE_DELAY","parseIntOrKeep","val","result","_","isNullOrUndefined","isNull","isUndefined","params","componentInfo","insight","getView","view","vm","tableWidth","replace","defaultScenario","ko","unwrap","buildTable","groupOpen","tableOptions","columns","columnConfig","layout","placeholder","groupStartOpen","ajaxLoader","datagridConfig","find","map","idx","clone","entities","indices","forEach","configItem","scenarioNum","scenario","isNumber","entity","push","omit","set","has","indexList","cleanItem","setPosn","setPosition","range","length","j","console","log","flatten","setArray","setName","setObject","assign","title","field","concat","table","Tabulator","setData","then","redraw","catch","err","throttledBuildTable","throttle","leading","tableUpdate","tableValidate","validate","VDL","tag","VXDAttributes","createViewModel","viewModel","transform","enums","insightModules","load","vdlIndexFilter","validatorFactory","insightGetter","RenderCallbacks","DataUtils","COLUMN_BUILD_DELAY","AUTOCOLUMN_PROP_NAME","VDGCattributes","docIgnore","expressionReturns","errorTargetSelector","closest","template","modifiesDescendants","indexFilters$","observable","filters$","pureComputed","reduce","memo","filterProps","buildColumn","done","columnReady","size","props","heading","editable","toLowerCase","visible","style","sortByFormatted","filterByFormatted","editorOptionsSet","selectNull","editorOptionsIncludeEmpty","checkedValue","editorCheckedValue","uncheckedValue","editorUncheckedValue","editorType","editorOptions","apply","arguments","isFunction","render","format","markAsBuiltinRenderCallback","data","formatCell","Formatter","formatNumber","filters","getValidationFn","validationObservable","extend","functionObservable","onDependenciesChange","read","rowData","validationProperties","getValidationProperties","customValidators","getCustomValidators","createFromValidators","disposeWhenDependenciesChange","editorValidate","newValue","keys","peek","paramsWatcher","computed","constructedParams","columnUpdate","dispose","filterUpdate","filterId","filterProperties","filterRemove","entityAttr","entityName","getModelEntityByName","get","test","entityType","getType","DataType","ARRAY","SET","addRawOrExpressionParam","textContent","contents","filter","index","nodeType","Node","TEXT_NODE","trim","toArray","join","getManagementType","EntityManagementType","RESULT","isEmpty","indexOf","optionsSetEntity","optionsSetEntityType","entityTypeIsNumber","getElementType"],"mappings":"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","file":"vdlx-datagrid.map","sourceRoot":"..\\..\\..\\src\\js","sourcesContent":["export default [\r\n    {\r\n        name: 'id',\r\n        description: 'Specify an element id for the table. Useful if you later want to target the table using a selector. ' +\r\n        'If not given then an id will be generated.'\r\n    },\r\n    {\r\n        name: 'scenario',\r\n        description: 'The default scenario to use for fetching data in the table. This can be overridden per column but the default ' +\r\n        'will be used when a column does not specify a particular scenario and the index sets will be fetched from the default scenario.',\r\n        acceptsExpression: true\r\n    },\r\n    {\r\n        name: 'page-size',\r\n        description: 'The number of rows to show per-page in paged mode. Defaults to 50.',\r\n        acceptsExpression: true\r\n    },\r\n    {\r\n        name: 'page-mode',\r\n        description: 'By default the table will show all rows. Set this attribute to \"paged\" to enable table pagination.'\r\n    },\r\n    {\r\n        name: 'height',\r\n        description: 'Table height',\r\n        acceptsExpression: true\r\n    },\r\n    {\r\n        name: 'show-filter',\r\n        description: 'Set this to \"true\" to enable the table filter. This will show a single input above the table to filter across all table cells.'\r\n    },\r\n    {\r\n        name: 'column-filter',\r\n        description: 'Set this to \"true\" to enable the column filters. This will show a header row with filter inputs for each column.'\r\n    },\r\n    {\r\n        name: 'add-remove-row',\r\n        description: 'Setting this will show the add-remove row buttons at the bottom of the table. Set to \"true\" ' +\r\n        'to prompt for index selection on row add. Set to \"addrow-autoinc\" will switch the behaviour to allow new ' +\r\n        'index values to be created, incrementing from the highest value in the set(s).'\r\n    },\r\n    {\r\n        name: 'selection-navigation',\r\n        description: 'Enable/disable table navigation, selection and clipboard features. Set to \"false\" to disable ' +\r\n        'these features. Defaults to true.'\r\n    },\r\n    {\r\n        name: 'modifier',\r\n        description: 'Table modifier function. Will be called after the table configuration ' +\r\n        'has been built. Provides a way to change the configuration before the table is rendered. Must ' +\r\n        'be an expression that resolves to a function. Takes the table configuration object and ' +\r\n        'should return the modified configuration. If an object is not returned then the table will be unaffected.',\r\n        acceptsExpression: true\r\n    },\r\n    {\r\n        name: 'width',\r\n        description: 'Set the table to a fixed width, in pixels. Accepts an integer value. ' +\r\n        'If set to the string \"custom\" then the table width is calculated by adding up all the widths of the columns in the table. ' +\r\n        'If a column doesn\\'t have a width specified then it is given a default value of 100px.',\r\n        acceptsExpression: false\r\n    },\r\n    {\r\n        name: 'class',\r\n        description: 'Space-separated list of the classes of the element.',\r\n        acceptsExpression: false\r\n    },\r\n    {\r\n        name: 'always-show-selection',\r\n        description: 'Whether to display selection on inactive tables. Set to \"true\" to keep selection on a table when it becomes inactive. Defaults to false.',\r\n        acceptsExpression: false\r\n    },\r\n    {\r\n        name: 'row-filter',\r\n        description: 'Expression to be used for filtering the rows of a <vdl-table>. This must be an expression and ' +\r\n        'should resolve to either a function or a boolean value. If a function it will be executed when table updates. ' +\r\n        'The function will have the following signature (rowData, indices) and should return a boolean.',\r\n        acceptsExpression: true,\r\n        required: false,\r\n        expressionVars: [\r\n            {\r\n                name: 'rowData',\r\n                type: 'Array.<(string|boolean|number)>',\r\n                description: 'Data for all row cells'\r\n            },\r\n            {\r\n                name: 'indices',\r\n                type: 'Array.<(string|boolean|number)>',\r\n                description: 'Data for the index columns of the row'\r\n            }\r\n        ]\r\n    },\r\n    {\r\n        name: 'save-state',\r\n        description: 'Set this to \"false\" to disable table state saving. By default table state is stored in the ' +\r\n        \"user's browser session so that user settings (e.g. page, sorting and search) are preserved if table data \" +\r\n        'is reloaded. Defaults to true.',\r\n        acceptsExpression: false,\r\n        required: false\r\n    },\r\n    {\r\n        name: 'grid-data',\r\n        acceptsExpression: true,\r\n    }\r\n];","export default function (element, attributes, api) {\r\n    var paramsBuilder = api.getComponentParamsBuilder(element);\r\n    var $element = $(element);\r\n\r\n    var scenarioId = attributes['scenario'];\r\n    if (scenarioId) {\r\n        if (scenarioId.expression.isString) {\r\n            var parsedNum = parseInt(scenarioId.rawValue);\r\n            if (isNaN(parsedNum)) {\r\n                paramsBuilder.addParam('scenarioId', scenarioId.rawValue);\r\n            } else {\r\n                if (parsedNum < 0) {\r\n                    throw Error('If scenario-id is specifying an index it must be a positive integer.');\r\n                }\r\n                paramsBuilder.addParam('scenarioId', parsedNum);\r\n            }\r\n        } else {\r\n            paramsBuilder.addParam('scenarioId', scenarioId.expression.value, true);\r\n        }\r\n    }\r\n\r\n    var pageSize = attributes['page-size'];\r\n    if (pageSize) {\r\n        if (pageSize.expression.isString) {\r\n            var pageSizeNum = parseInt(pageSize.rawValue);\r\n            if (!isNaN(pageSizeNum)) {\r\n                paramsBuilder.addParam('pageSize', pageSizeNum);\r\n            }\r\n        } else {\r\n            paramsBuilder.addParam('pageSize', pageSize.expression.value, true);\r\n        }\r\n    }\r\n\r\n    var pageMode = attributes['page-mode'];\r\n    if (pageMode) {\r\n        paramsBuilder.addParam('pageMode', pageMode.rawValue);\r\n    }\r\n\r\n    // TODO No table search in vdlx-datagrid\r\n    // var showFilter = attributes['show-filter'];\r\n    // if (showFilter) {\r\n    //     paramsBuilder.addParam('showFilter', showFilter.rawValue === 'true');\r\n    // }\r\n\r\n    var columnFilter = attributes['column-filter'];\r\n    if (columnFilter) {\r\n        paramsBuilder.addParam('columnFilter', columnFilter.rawValue === 'true');\r\n    }\r\n\r\n    var addRemoveRow = attributes['add-remove-row'];\r\n    if (addRemoveRow) {\r\n        if (addRemoveRow.rawValue === 'true') {\r\n            paramsBuilder.addParam('addRemoveRow', true);\r\n        } else if (addRemoveRow.rawValue === 'addrow-autoinc') {\r\n            paramsBuilder.addParam('addRemoveRow', 'addrow-autoinc');\r\n        }\r\n    }\r\n\r\n    // TODO row selection?\r\n    // var selectionNavigation = attributes['selection-navigation'];\r\n    // if (selectionNavigation && selectionNavigation.rawValue === 'false') {\r\n    //     paramsBuilder.addParam('selectionNavigation', false);\r\n    // }\r\n\r\n    var tableId = attributes['id'];\r\n    if (tableId) {\r\n        $element.attr('id', null);\r\n        paramsBuilder.addParam('tableId', tableId.rawValue);\r\n    }\r\n\r\n    var width = attributes['width'];\r\n    if (width) {\r\n        paramsBuilder.addParam('width', width.rawValue);\r\n    }\r\n\r\n    // TODO state saving?\r\n    // var saveState = attributes['save-state'];\r\n    // if (saveState && saveState.rawValue === 'false') {\r\n    //     paramsBuilder.addParam('saveState', false);\r\n    // }\r\n\r\n    var modifier = attributes['modifier'];\r\n    if (modifier) {\r\n        if (modifier.expression.isString) {\r\n            throw Error('The vdl-table modifier attribute must be supplied as an expression');\r\n        }\r\n        paramsBuilder.addParam('modifier', modifier.expression.value, true);\r\n    }\r\n\r\n    var klass = attributes['class'];\r\n    if (klass) {\r\n        $element.removeAttr('class');\r\n        paramsBuilder.addParam('class', klass.rawValue);\r\n    }\r\n\r\n    // TODO any way to achieve this? Is it needed?\r\n    // var alwaysShowSelection = attributes['always-show-selection'];\r\n    // if (alwaysShowSelection && (alwaysShowSelection.rawValue.toUpperCase() === 'TRUE')) {\r\n    //     paramsBuilder.addParam('alwaysShowSelection', true);\r\n    // }\r\n\r\n    var rowFilter = attributes['row-filter'];\r\n    if (rowFilter) {\r\n        if (rowFilter.expression.isString) {\r\n            throw Error('The vdl-table \"row-filter\" attribute must be supplied as an expression');\r\n        }\r\n\r\n        paramsBuilder.addFunctionOrExpressionParam(\r\n            'rowFilter',\r\n            rowFilter.expression.value,\r\n            ['rowData', 'indices']);\r\n    }\r\n\r\n    // TODO temporary data\r\n    var gridData = attributes['grid-data'];\r\n    if (gridData) {\r\n        paramsBuilder.addParam('gridData', gridData.expression.value, true);\r\n    }\r\n\r\n    var gridHeight = attributes['height'];\r\n    if (gridHeight) {\r\n        if (gridHeight.expression.isString) {\r\n            paramsBuilder.addParam('gridHeight', gridHeight.rawValue, false);\r\n        } else {\r\n            paramsBuilder.addParam('gridHeight', gridHeight.expression.value, true);\r\n        }\r\n    }\r\n\r\n    const $tableDiv = $('<div/>');\r\n    $tableDiv.attr('id', tableId.rawValue);\r\n    $tableDiv.addClass('table-striped table-bordered table-condensed');\r\n    $element.append($tableDiv);\r\n}","const COLUMN_UPDATE_DELAY = 100;\r\n\r\nfunction parseIntOrKeep (val) {\r\n    var result = _.parseInt(val);\r\n    if (_.isNaN(result)) {\r\n        return val;\r\n    }\r\n    return result;\r\n}\r\n\r\nfunction isNullOrUndefined (val) {\r\n    return _.isNull(val) || _.isUndefined(val);\r\n}\r\n\r\nexport default function (params, componentInfo) {\r\n    const view = insight.getView();\r\n\r\n    var vm = {};\r\n    // debugger;\r\n    vm.columnConfig = [];\r\n\r\n    if (params.width) {\r\n        vm.tableWidth = params.width.replace('px', '');\r\n    }\r\n\r\n    const element = componentInfo.element;\r\n\r\n    const defaultScenario = params.scenarioId || 0;\r\n\r\n    const pageMode = params.pageMode;\r\n    const gridHeight = ko.unwrap(params.gridHeight);\r\n\r\n    function buildTable () {\r\n        var groupOpen = 'true';\r\n\r\n        var tableOptions = {\r\n            columns: vm.columnConfig,\r\n            layout: 'fitColumns',\r\n            // height: '600px',\r\n            placeholder: 'Waiting for data',\r\n            // groupBy: groupBy,\r\n            groupStartOpen: groupOpen === 'true',\r\n            ajaxLoader: true // ???\r\n        };\r\n\r\n        const datagridConfig = $(element)\r\n            .find('vdlx-datagrid-column')\r\n            .map(function (idx, element) {\r\n                return _.clone(element['autotableConfig']);\r\n            });\r\n\r\n        var entities = [];\r\n        var indices = {};\r\n\r\n        _.forEach(datagridConfig, function (configItem) {\r\n            var scenarioNum = parseIntOrKeep(configItem.scenario || defaultScenario);\r\n            if (_.isNumber(scenarioNum)) {\r\n                if (scenarioNum < 0) {\r\n                    // reject('Scenario index must be a positive integer.');\r\n                }\r\n            }\r\n            configItem.scenario = scenarioNum;\r\n            if (!!configItem.entity) {\r\n                configItem.name = configItem.entity;\r\n                delete configItem.entity;\r\n                entities.push(_.omit(configItem, isNullOrUndefined));\r\n            } else if (!!configItem.set) {\r\n                if (!_.has(indices, [configItem.set])) {\r\n                    indices[configItem.set] = [];\r\n                }\r\n                const indexList = indices[configItem.set];\r\n                const cleanItem = _.omit(configItem, isNullOrUndefined);\r\n                const setPosn = configItem.setPosition;\r\n                if (setPosn == null) {\r\n                    indexList.push(cleanItem);\r\n                } else if (indexList[setPosn]) {\r\n                    // reject('Table column for set \"' + configItem.set + '\" at position ' + setPosn\r\n                    //     + ' specified more than once');\r\n                } else {\r\n                    indexList[setPosn] = cleanItem;\r\n                    // if we have increased the length, then need to\r\n                    // explicitly inserts null/undefined here, or some\r\n                    // standard algorithms behave oddly. (E.g. _.map\r\n                    // will count the missing items, but [].map won't)\r\n                    _.range(indexList.length).forEach(function (j) {\r\n                        if (!indexList[j]) {\r\n                            indexList[j] = null;\r\n                        }\r\n                    });\r\n                }\r\n            } else {\r\n                // reject('Unknown column type');\r\n            }\r\n        });\r\n\r\n        console.log(indices, entities);\r\n\r\n        tableOptions.columns = _.flatten(\r\n            _.map(indices, (setArray, setName) => {\r\n                return _.map(setArray, (setObject, setPosition) => {\r\n                    return _.assign(setObject, { title: setObject.set, field: setObject.set, setPosition: setPosition });\r\n                });\r\n            })\r\n        );\r\n\r\n        tableOptions.columns = tableOptions.columns.concat(\r\n            _.map(entities, entity => _.assign(entity, { title: entity.name, field: entity.name }))\r\n        );\r\n\r\n        vm.table = new Tabulator('#' + params.tableId, tableOptions);\r\n\r\n        vm.table\r\n            .setData(params.gridData)\r\n            .then(function () {\r\n                vm.table.redraw();\r\n            })\r\n            .catch(function (err) {\r\n                debugger;\r\n            });\r\n    }\r\n\r\n    const throttledBuildTable = _.throttle(buildTable, COLUMN_UPDATE_DELAY, { leading: false });\r\n\r\n    vm.tableUpdate = function () {\r\n        throttledBuildTable();\r\n    };\r\n\r\n    vm.tableValidate = function () {\r\n        debugger;\r\n    };\r\n\r\n    vm.validate = function () {\r\n        debugger;\r\n    };\r\n\r\n    buildTable();\r\n\r\n    return vm;\r\n}","\r\nimport VXDAttributes from './attributes';\r\nimport transform from './transform';\r\nimport viewModel from './view-model';\r\n\r\nVDL('vdlx-datagrid', {\r\n    tag: 'vdlx-datagrid',\r\n    attributes: VXDAttributes,\r\n    createViewModel: viewModel,\r\n    transform: transform\r\n});\r\n","/*\r\n    vdlx-datagrid-column\r\n\r\n    To be used as the direct child of <vdlx-datagrid>. <vdlx-datagrid-column may be used multiple times within its parent.\r\n    One of these tags directly generates a column in the resulting Datagrid.\r\n\r\n    This tag creates config to tell its parent how to populate the datagrid column.\r\n */\r\n\r\nvar enums = insightModules.load('enums');\r\nvar vdlIndexFilter = insightModules.load('vdl/extensions/vdl-index-filter');\r\nvar validatorFactory = insightModules.load('vdl/vdl-validator-factory');\r\nvar insightGetter = insightModules.load('insight-getter');\r\nvar RenderCallbacks = insightModules.load('components/table/render-callbacks');\r\nvar DataUtils = insightModules.load('utils/data-utils');\r\n\r\nvar COLUMN_BUILD_DELAY = 50;\r\nvar AUTOCOLUMN_PROP_NAME = 'autotableConfig';\r\n\r\n/*\r\n    vdlx-datagrid-column attributes\r\n\r\n    TODO do we need to add extra properties for the datagrid?\r\n */\r\nvar VDGCattributes = [\r\n    {\r\n        name: 'entity',\r\n        description: 'Name of the array entity to show in this column. Throws an error if the entity doesn\\'t exist or is not an array or set type.',\r\n        required: false\r\n    },\r\n    {\r\n        name: 'set',\r\n        description: 'Name of the set entity to show in this column. Throws an error if the entity doesn\\'t exist or is not a set type.',\r\n        required: false\r\n    },\r\n    {\r\n        name: 'set-position',\r\n        description: 'Index (zero-based) of occurrence of that index set in the index tuple for the array.' +\r\n        'Defaults to next available position.'\r\n    },\r\n    {\r\n        name: 'scenario',\r\n        description: 'The scenario id/index for this column. Not allowed on index column (when specifying a set entity)',\r\n        acceptsExpression: true\r\n    },\r\n    {\r\n        name: 'editable',\r\n        description: 'Whether the cells within this column are editable.',\r\n        acceptsExpression: true\r\n    },\r\n    {\r\n        name: 'vdl-visible',\r\n        acceptsExpression: true,\r\n        docIgnore: true\r\n    },\r\n    {\r\n        name: 'heading',\r\n        description: 'A custom header for this column, will default to be the entity alias. ' +\r\n        'Alternatively, you can set the title as the text contents of the <vdlx-datagrid-column> element.',\r\n        acceptsExpression: true\r\n    },\r\n    {\r\n        name: 'width',\r\n        description: 'The width, in pixels, to set the column.',\r\n        acceptsExpression: true\r\n    },\r\n    {\r\n        name: 'class',\r\n        description: 'CSS classes to add to the table column cells. You can provide multiple classes separated by spaces.',\r\n        acceptsExpression: true\r\n    },\r\n    {\r\n        name: 'sort-by-formatted',\r\n        description: 'Use formatted values for sorting.'\r\n    },\r\n    {\r\n        name: 'filter-by-formatted',\r\n        description: 'Use formatted values for filtering. This defaults to false unless the entity has a label in which case the default is true.'\r\n    },\r\n    {\r\n        name: 'editor-type',\r\n        description: 'The editor type to use, in edit mode, for cells in this column. If not specified then it ' +\r\n        'will be autodetected based on entity type. Possible values: checkbox, select, text'\r\n    },\r\n    {\r\n        name: 'editor-checked-value',\r\n        description: 'The value to set the cell data to if input type is checkbox and it is checked.'\r\n    },\r\n    {\r\n        name: 'editor-unchecked-value',\r\n        description: 'The value to set the cell data to if input type is checkbox and it is not checked.'\r\n    },\r\n    {\r\n        name: 'editor-options-set',\r\n        description: 'Name of a set entity to use for select options. This will display labels if a labels entity ' +\r\n        'is defined against this set. This will automatically set the editor-type to be \"select\".'\r\n    },\r\n    {\r\n        name: 'editor-options',\r\n        description: 'An expression that results in one of the follow to be used as the select options: an array ' +\r\n        'of values, an object of property to value or an array of objects containing key and value properties. ' +\r\n        'This will automatically set the editor-type to be \"select\".',\r\n        acceptsExpression: true,\r\n        expressionVars: [\r\n            {\r\n                name: 'value',\r\n                type: '(string|boolean|number)',\r\n                description: 'The value of the cell. Its data type will match that of the array elements in this column.'\r\n            },\r\n            {\r\n                name: 'rowData',\r\n                type: 'Array.<(string|boolean|number)>',\r\n                description: 'The values from each cell in the current row'\r\n            }\r\n        ],\r\n        expressionReturns: {\r\n            type: 'Array.<*>|Object.<string, string>|Array.<{key: string, value: *}>',\r\n            description: 'An array of values, an object of property to value or an array of objects containing key and value properties'\r\n        }\r\n    },\r\n    {\r\n        name: 'editor-options-include-empty',\r\n        description: 'Allow array elements to be removed using the select input. Setting this to true will add ' +\r\n        'a blank item to the top of the select list. Defaults to false.'\r\n    },\r\n    {\r\n        name: 'render',\r\n        description: 'Reference to a custom cell renderer. Overrides any default entity rendering. This will be used to generate the cell value ' +\r\n        'for rendering, filtering and sorting. It must be an expression and resolves as a function, this function should return a string.',\r\n        acceptsExpression: true,\r\n        expressionVars: [\r\n            {\r\n                name: 'data',\r\n                type: '(string|boolean|number)',\r\n                description: 'The value of the cell being rendered. Its data type will match that of the array elements in this column.'\r\n            },\r\n            {\r\n                name: 'type',\r\n                type: 'string',\r\n                description: 'The type call data requested - this will be \"filter\", \"display\", \"type\" or \"sort\"'\r\n            },\r\n            {\r\n                name: 'row',\r\n                type: 'Array.<(string|boolean|number)>',\r\n                description: 'The values from each cell in the current row'\r\n            }\r\n        ]\r\n    },\r\n    {\r\n        name: 'format',\r\n        description: 'Specify a number formatting string. Only applicable to array elements of type integer, real, ' +\r\n        'decision variable and constraint. The formatting syntax is explained in the Xpress Insight Developer Guide.'\r\n    }\r\n];\r\n\r\nVDL('vdlx-datagrid-column', {\r\n    tag: 'vdlx-datagrid-column',\r\n    attributes: VDGCattributes,\r\n    // Apply errors to the parent vdlx-datagrid element\r\n    errorTargetSelector: function (element) {\r\n        // error is displayed on autotable, or if there isn't one, the parent\r\n        // will have to do as as default\r\n        return $(element).closest('vdlx-datagrid')[0] || element;\r\n    },\r\n\r\n    template: '<vdl-contents></vdl-contents>',\r\n\r\n    modifiesDescendants: false,\r\n\r\n    createViewModel: function (params, componentInfo) {\r\n\r\n        var indexFilters$ = ko.observable({});\r\n        var filters$ = ko.pureComputed(function () {\r\n            return _.reduce(indexFilters$(), function (memo, filterProps) {\r\n                return _.set(memo, [filterProps.setName, filterProps.setPosition], filterProps.value);\r\n            }, {});\r\n        });\r\n\r\n        var buildColumn = _.throttle(function (done) {\r\n            console.log('vdlx-datagrid update column');\r\n            var columnReady = $(componentInfo.element).find('vdl-index-filter').length === _.size(indexFilters$());\r\n\r\n            var props = {\r\n                scenario: ko.unwrap(params.scenario),\r\n                title: ko.unwrap(params.heading),\r\n                width: ko.unwrap(params.width),\r\n                editable: ('' + ko.unwrap(params.editable)).toLowerCase() === 'true',\r\n                visible: !(('' + ko.unwrap(params.visible)).toLowerCase() === 'false'),\r\n                style: params.style,\r\n                sortByFormatted: params.sortByFormatted,\r\n                filterByFormatted: params.filterByFormatted,\r\n                editorOptionsSet: params.editorOptionsSet,\r\n                selectNull: params.editorOptionsIncludeEmpty,\r\n                checkedValue: params.editorCheckedValue,\r\n                uncheckedValue: params.editorUncheckedValue,\r\n                editorType: params.editorType\r\n            };\r\n\r\n            if (params.editorOptions) {\r\n                props.editorOptions = function () {\r\n                    // Return an empty list of options if value is undefined\r\n                    return params.editorOptions.apply(null, arguments) || [];\r\n                };\r\n            }\r\n\r\n            if (_.isFunction(params.render)) {\r\n                props.render = params.render;\r\n            }\r\n\r\n            if (params.format) {\r\n                props.render = RenderCallbacks.markAsBuiltinRenderCallback(function (data, type) {\r\n                    var formatCell = type === 'display'\r\n                        || (type === 'filter' && params.filterByFormatted)\r\n                        || (type === 'sort' && params.sortByFormatted);\r\n\r\n                    return formatCell ? insightGetter().Formatter.formatNumber(data, params.format) : data;\r\n                });\r\n\r\n                props.format = params.format;\r\n            } else {\r\n                props.format = null;\r\n            }\r\n\r\n            if (!!params.entity) {\r\n                props.entity = params.entity;\r\n            } else if (!!params.set) {\r\n                props.set = params.set;\r\n            }\r\n\r\n            if (params.setPosition != null) {\r\n                props.setPosition = params.setPosition;\r\n            }\r\n\r\n            if (_.size(filters$())) {\r\n                props.filters = filters$();\r\n            }\r\n\r\n            if (props.entity) {\r\n                var getValidationFn = function (indices) {\r\n                    var validationProperties = validatorFactory.getValidationProperties({\r\n                        entity: props.entity,\r\n                        indices: indices\r\n                    });\r\n\r\n                    var customValidators = validatorFactory\r\n                        .getCustomValidators(validationProperties, componentInfo.element);\r\n\r\n                    return validatorFactory.createFromValidators(customValidators);\r\n                };\r\n\r\n                var validationObservable = ko.observable().extend({\r\n                    functionObservable: {\r\n                        onDependenciesChange: function () {\r\n                            params.tableValidate();\r\n\r\n                        },\r\n                        read: function (indices, value, rowData) {\r\n                            return getValidationFn(indices)(value, rowData);\r\n                        },\r\n                        disposeWhenDependenciesChange: false\r\n                    }\r\n                });\r\n\r\n                props.editorValidate = function (newValue, rowData, keys) {\r\n                    validationObservable(keys, newValue, rowData);\r\n                    return validationObservable.peek();\r\n                };\r\n            }\r\n\r\n            if (columnReady) {\r\n                componentInfo.element[AUTOCOLUMN_PROP_NAME] = props;\r\n                _.isFunction(params.tableUpdate) && params.tableUpdate();\r\n            }\r\n\r\n            if (_.isFunction(done)) {\r\n                done();\r\n            }\r\n\r\n        }, COLUMN_BUILD_DELAY, {leading: false});\r\n\r\n        var paramsWatcher = ko.computed(function () {\r\n            var constructedParams = {\r\n                scenario: ko.unwrap(params.scenario),\r\n                title: ko.unwrap(params.heading),\r\n                width: ko.unwrap(params.width),\r\n                editable: ko.unwrap(params.editable),\r\n                visible: ko.unwrap(params.visible),\r\n            };\r\n\r\n            buildColumn();\r\n\r\n            return constructedParams;\r\n        });\r\n\r\n        return {\r\n            columnUpdate: buildColumn,\r\n            validate: buildColumn,\r\n            dispose: function () {\r\n                paramsWatcher.dispose();\r\n                _.isFunction(params.tableUpdate) && params.tableUpdate();\r\n            },\r\n            filterUpdate: function (filterId, filterProperties) {\r\n                indexFilters$(_.set(indexFilters$(), filterId, filterProperties));\r\n                buildColumn();\r\n            },\r\n            filterRemove: function (filterId) {\r\n                indexFilters$(_.omit(indexFilters$(), filterId));\r\n                buildColumn();\r\n            }\r\n        };\r\n    },\r\n\r\n    transform: function (element, attributes, api) {\r\n\r\n        var $element = $(element);\r\n\r\n        if (!$element.closest('vdlx-datagrid').length) {\r\n            throw Error('<vdlx-datagrid-column> must be contained within a <vdlx-datagrid> tag.');\r\n        }\r\n\r\n        if (!attributes.entity && !attributes.set) {\r\n            throw Error('Must specify either an \"entity\" or \"set\" attribute for <vdlx-datagrid-column>.');\r\n        }\r\n\r\n        if (attributes.entity && attributes.set) {\r\n            throw Error('You cannot specify both \"entity\" and \"set\" on a <vdlx-datagrid-column>.');\r\n        }\r\n\r\n        if (attributes['set-position'] && !attributes.set) {\r\n            throw Error('You cannot specify \"set-position\" without also specifying \"set\"');\r\n        }\r\n\r\n        if (attributes.set && attributes.scenario) {\r\n            throw Error('The \"scenario\" attribute cannot be used in combination with the \"set\" attribute on a <vdlx-datagrid-column>.');\r\n        }\r\n\r\n        var entityAttr = !!attributes.entity ? attributes.entity : attributes.set;\r\n\r\n        var entityName = entityAttr.rawValue;\r\n        var entity = api.getModelEntityByName(entityName);\r\n        if (!entity) {\r\n            throw Error('Entity \"' + entityName + '\" does not exist in the model schema.');\r\n        }\r\n\r\n        var setPosition = _.get(attributes, ['set-position', 'rawValue']);\r\n        if (setPosition != null) {\r\n            if (!/^\\d+$/.test(setPosition)) {\r\n                throw Error('Invalid set-position \"' + setPosition + '\", must be a number at least zero');\r\n            } else {\r\n                setPosition = +setPosition;\r\n            }\r\n        }\r\n        var entityType = entity.getType();\r\n        if (attributes.entity && entityType !== enums.DataType.ARRAY) {\r\n            throw Error('Entity type ' + entityType + ' cannot be displayed as a column in <vdlx-datagrid>.');\r\n        } else if (attributes.set && entityType !== enums.DataType.SET) {\r\n            throw Error('Entity type ' + entityType + ' cannot be specified as an index set in <vdlx-datagrid>.');\r\n        }\r\n\r\n        var paramsBuilder = api.getComponentParamsBuilder(element)\r\n            .addParam('tableUpdate', '$component.tableUpdate', true)\r\n            .addParam('tableValidate', '$component.tableValidate', true)\r\n            .addParam('validate', '$component.validate', true);\r\n\r\n        if (!!attributes.entity) {\r\n            paramsBuilder.addParam('entity', entityName);\r\n        } else {\r\n            paramsBuilder.addParam('set', entityName);\r\n        }\r\n\r\n        if (setPosition != null) {\r\n            paramsBuilder.addParam('setPosition', setPosition);\r\n        }\r\n\r\n        var heading = attributes['heading'];\r\n        if (heading) {\r\n            paramsBuilder.addRawOrExpressionParam('heading', heading);\r\n        } else {\r\n            var textContent = $(element)\r\n                .contents()\r\n                .filter(function (index, element) {\r\n                    return element.nodeType === Node.TEXT_NODE && element.textContent.trim() !== '';\r\n                })\r\n                .toArray()\r\n                .map(function (element) {\r\n                    return element.textContent.trim();\r\n                })\r\n                .join(' ');\r\n\r\n            if (textContent) {\r\n                paramsBuilder.addParam('heading', textContent);\r\n            }\r\n        }\r\n\r\n        var scenario = attributes['scenario'];\r\n        if (scenario) {\r\n            paramsBuilder.addRawOrExpressionParam('scenario', scenario);\r\n        }\r\n\r\n        var editable = attributes['editable'];\r\n        if (attributes['editable']) {\r\n            if (entity.getManagementType() === enums.EntityManagementType.RESULT) {\r\n                throw Error('Cannot set editable attribute on a <vdlx-datagrid-column> bound to a result entity.');\r\n            }\r\n            paramsBuilder.addRawOrExpressionParam('editable', editable);\r\n        }\r\n\r\n        var visible = attributes['vdl-visible'];\r\n        if (visible) {\r\n            if (visible.expression.isString || _.isEmpty(visible.expression.value)) {\r\n                throw Error('vdl-visible has to be an expression');\r\n            }\r\n            paramsBuilder.addRawOrExpressionParam('visible', visible);\r\n            $element.removeAttr('vdl-visible');\r\n        }\r\n\r\n        var width = attributes['width'];\r\n        if (width) {\r\n            paramsBuilder.addRawOrExpressionParam('width', width);\r\n            // Remove the width attribute from the vdlx-datagrid-column as it has implications on page layout\r\n            $element.removeAttr('width');\r\n        }\r\n\r\n        var style = attributes['class'];\r\n        if (style) {\r\n            paramsBuilder.addRawOrExpressionParam('style', style);\r\n            // Remove the class attribute from the vdlx-datagrid-column as it has implications on styling for the hidden element\r\n            $element.removeAttr('class');\r\n        }\r\n\r\n        var sortByFormatted = attributes['sort-by-formatted'];\r\n        if (sortByFormatted && sortByFormatted.rawValue === 'true') {\r\n            paramsBuilder.addParam('sortByFormatted', true);\r\n        }\r\n\r\n        var filterByFormatted = attributes['filter-by-formatted'];\r\n        if (filterByFormatted) {\r\n            if (filterByFormatted.rawValue === 'true') {\r\n                paramsBuilder.addParam('filterByFormatted', true);\r\n            } else if (filterByFormatted.rawValue === 'false') {\r\n                paramsBuilder.addParam('filterByFormatted', false);\r\n            }\r\n        }\r\n\r\n        var editorType = attributes['editor-type'];\r\n        var editorTypes = ['checkbox', 'select', 'text'];\r\n        if (editorType && editorTypes.indexOf(editorType.rawValue) !== -1) {\r\n            if (editorType.rawValue === 'select') {\r\n                if (!attributes['editor-options-set'] && !attributes['editor-options']) {\r\n                    throw Error('vdlx-datagrid-column with \"editor-type\" of \"select\" needs either the \"editor-options-set\" or the \"editor-options\" attribute to be supplied.');\r\n                }\r\n            }\r\n            paramsBuilder.addParam('editorType', editorType.rawValue);\r\n        }\r\n\r\n        var editorCheckedValue = attributes['editor-checked-value'];\r\n        if (editorCheckedValue) {\r\n            paramsBuilder.addParam('editorCheckedValue', editorCheckedValue.rawValue);\r\n        }\r\n\r\n        var editorUncheckedValue = attributes['editor-unchecked-value'];\r\n        if (editorUncheckedValue) {\r\n            paramsBuilder.addParam('editorUncheckedValue', editorUncheckedValue.rawValue);\r\n        }\r\n\r\n        var editorOptionsSet = attributes['editor-options-set'];\r\n        if (editorOptionsSet) {\r\n            var optionsSetEntity = api.getModelEntityByName(editorOptionsSet.rawValue);\r\n            if (!optionsSetEntity) {\r\n                throw Error('vdlx-datagrid-column editor-options-set entity \"' + editorOptionsSet.rawValue + '\" does not exist in the model schema.');\r\n            }\r\n\r\n            var optionsSetEntityType = optionsSetEntity.getType();\r\n            if (optionsSetEntityType !== enums.DataType.SET) {\r\n                throw Error('Entity \"' + editorOptionsSet.rawValue + '\" cannot be used as editor-options-set, wrong data type.');\r\n            }\r\n            paramsBuilder.addParam('editorOptionsSet', editorOptionsSet.rawValue);\r\n        }\r\n\r\n        var editorOptions = attributes['editor-options'];\r\n        if (editorOptions) {\r\n            if (editorOptions.expression.isString) {\r\n                throw Error('vdlx-datagrid-column attribute \"editor-options\" must be an expression.');\r\n            }\r\n            paramsBuilder.addFunctionOrExpressionParam(\r\n                'editorOptions',\r\n                editorOptions.expression.value,\r\n                ['value', 'rowData']);\r\n        }\r\n\r\n        if (editorOptionsSet && editorOptions) {\r\n            throw Error('vdlx-datagrid-column cannot have both editor-options-set and editor-options specified.');\r\n        }\r\n\r\n        var editorOptionsIncludeEmpty = attributes['editor-options-include-empty'];\r\n        if (editorOptionsIncludeEmpty) {\r\n            paramsBuilder.addParam('editorOptionsIncludeEmpty', editorOptionsIncludeEmpty.rawValue === 'true');\r\n        }\r\n\r\n        var render = attributes['render'];\r\n        if (render) {\r\n            if (render.expression.isString) {\r\n                throw Error('Render parameter has to be an expression');\r\n            }\r\n            paramsBuilder.addParam('render', render.expression.value, true);\r\n        }\r\n\r\n        var format = attributes['format'];\r\n        if (format) {\r\n            if (!DataUtils.entityTypeIsNumber(entity)) {\r\n                throw Error('Entity ' + entityName + ' with element type ' + entity.getElementType() + ' cannot be formatted');\r\n            }\r\n\r\n            paramsBuilder.addParam('format', format.rawValue);\r\n        }\r\n    }\r\n});","\r\nimport '../css/vdlx-datagrid.css';\r\nimport './vdlx-datagrid';\r\nimport './vdlx-datagrid-column';\r\n\r\n"]}